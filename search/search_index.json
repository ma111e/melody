{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the ~Melodoc~.</p> <p>Melody is an internet sensor built for threat intelligence. This tool have multiple use cases :</p> <ul> <li>Build historic data to extract trends and patterns </li> <li>Keep an eye on specific threats</li> <li>Monitor emerging threats exploitation</li> <li>Index malicious activity by detecting exploitation attempts and targeted scanners</li> <li>Log every contact your application receives from the internet to find potentially malicious activity</li> </ul> <p>Deploying it can be as easy as pulling the latest compiled binary or the official Docker image. </p> <p>Add your favorite rules, some configuration tweaks, a BPF to clean the noise a bit and then forget it<sup>1</sup> and let the internet symphony flow to you.</p> <p>You can tweak the options either with a file or directly by passing options trough the CLI, allowing Melody to act as a standalone application.</p> <p>Melody will also handle log rotation for you. It has been designed to be able to run forever on the smallest VPS while handling millions of packets a day.</p> <ol> <li> <p>You should either setup an automated patching process or come back often to apply security patches on the host though\u00a0\u21a9</p> </li> </ol>"},{"location":"features/","title":"Features","text":"<p>Here are some key features of Melody :</p> <ul> <li>Transparent capture</li> <li>Write detection rules and tag specific packets to analyze them at scale </li> <li>Mock vulnerable websites using the builtin HTTP/S server</li> <li>Supports the main internet protocols over IPv4 and IPv6</li> <li>Handles log rotation for you : Melody is designed to run forever on the smallest VPS</li> <li>Minimal configuration required</li> <li>Standalone mode : configure Melody using only the CLI</li> <li>Easily scalable :<ul> <li>Statically compiled binary</li> <li>Up-to-date Docker image</li> </ul> </li> </ul> <p>Additional features on the roadmap include :</p> <ul> <li>Dedicated helper program to create, test and manage rules</li> <li>Centralized rules management</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>To install Melody, clone the repo or grab the latest :</p> <pre><code>git clone https://github.com/bonjourmalware/melody /opt/melody\n\ncd /opt/melody\n\ngo build -ldflags=\"-s -w -extldflags=-static\" -o melody\nsudo setcap cap_net_raw,cap_setpcap=ep ./melody\n\necho \"Ensure net-tools is installed in order to use the 'route' command\"\nsudo apt install net-tools\n\necho \"&gt; Setting listening interface to \\\"$(route | grep '^default' | grep -o '[^ ]*$')\\\"\"\nsed -i \"s/# listen.interface: \\\"lo\\\"/listen.interface: \\\"$(route | grep '^default' | grep -o '[^ ]*$')\\\"/g\" /opt/melody/config.yml\necho\necho -n \"Current listening interface :\\n\\t\"\ngrep listen.interface /opt/melody/config.yml\n\necho \"Current BPF is '$(cat /opt/melody/filter.bpf)'\"\n\n# Don't forget to filter the noise by editing filter.bpf\n</code></pre>"},{"location":"installation/#systemd","title":"Systemd","text":"<p>You can tweak the provided service file to use Melody with <code>systemd</code>.</p> <p>The file can be found in <code>$melody/etc/melody.service</code>.</p> <p>Example</p> <pre><code>[Unit]\nDescription=Melody sensor\nAfter=network-online.target\n\n[Service]\nType=simple\nWorkingDirectory=/opt/melody\nExecStart=/opt/melody/melody\nRestart=on-failure\nUser=melody\nGroup=melody\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Install it with :</p> <pre><code>make service\n</code></pre> <p>or</p> <pre><code>sudo ln -s \"$(pwd)/etc/melody.service\" /etc/systemd/system/melody.service\nsudo systemctl daemon-reload\nsudo systemctl enable melody\nsudo systemctl status melody\n</code></pre>"},{"location":"installation/#supervisord","title":"Supervisord","text":"<p>You can also tweak the provided configuration file to use Melody with <code>supervisord</code>.</p> <p>The file can be found in <code>$melody/etc/melody.conf</code>.</p> <p>Example</p> <pre><code>[program:melody]\ncommand=/opt/melody/melody\ndirectory=/opt/melody\nstdout_logfile=/opt/melody/melody.out\nstderr_logfile=/opt/melody/melody.err\nautostart=true\nautorestart=true\nstopasgroup=true\nkillasgroup=true\n</code></pre> <p>Install it with :</p> <pre><code>make supervisor\n</code></pre> <p>or</p> <pre><code>sudo ln -s $(pwd)/etc/melody.conf /etc/supervisor/conf.d/melody.conf\nsudo supervisorctl reload\nsudo supervisorctl status all\n</code></pre>"},{"location":"installation/#uninstall","title":"Uninstall","text":"<p>Uninstall Melody by removing the log directories (default <code>$melody/logs</code>), the service files (<code>/etc/systemd/system/melody.service</code> and <code>/etc/supervisor/conf.d/melody.conf</code>) and the Melody home directory (default <code>/opt/melody</code>).</p> <p>Example</p> <p>Uncomment and use these command carefully. <pre><code># sudo systemctl stop melody &amp;&amp; sudo rm /etc/systemd/system/melody.service\n# sudo supervisorctl stop melody &amp;&amp; sudo rm /etc/supervisor/conf.d/melody.conf\n# rm -rf /opt/melody\n</code></pre></p> <p>Danger</p> <p>Keep in mind that removing Melody's home directory will most likely remove its logs directory as well. All logged data might be lost.</p>"},{"location":"layers/","title":"Layers","text":""},{"location":"layers/#http-https","title":"HTTP / HTTPS","text":""},{"location":"layers/#rules","title":"Rules","text":"Key Type Example <code>http.uri</code> complex <pre>http.uri:\u00a0\u00a0contains:\u00a0\u00a0\u00a0\u00a0- \"/console/css/%2e\"</pre> <code>http.body</code> complex <pre>http.body:\u00a0\u00a0contains:\u00a0\u00a0\u00a0\u00a0- \"I made a discovery today.\"</pre> <code>http.headers</code> complex <pre>http.headers:\u00a0\u00a0is:\u00a0\u00a0\u00a0\u00a0- \"User-agent: Mozilla/5.0 zgrab/0.x\"</pre> <code>http.method</code> complex <pre>http.method:\u00a0\u00a0is:\u00a0\u00a0\u00a0\u00a0- \"POST\"</pre> <code>http.proto</code> complex <pre>http.proto:\u00a0\u00a0is:\u00a0\u00a0\u00a0\u00a0- \"HTTP/1.1\"</pre> <code>http.tls</code> bool <pre>false</pre> <p>Important</p> <p>HTTP being an application protocol, the full packet is assembled from multiple frames and thus does not have its transport information embedded.</p> <p>However, the reassembled packet data share its session with the TCP frames it comes from. You can link them together by looking up the session.</p> <p>Note</p> <p>HTTPS packets are captured via the webserver and not reassembled : they have their own session and are not linked with the source frames.    </p>"},{"location":"layers/#log-data","title":"Log data","text":"<p>Example</p> <pre><code>{\n  \"http\": {\n    \"verb\": \"POST\",\n    \"proto\": \"HTTP/1.1\",\n    \"uri\": \"/\",\n    \"src_port\": 51746,\n    \"dst_host\": \"127.0.0.1\",\n    \"user_agent\": \"curl/7.58.0\",\n    \"headers\": {\n      \"Accept\": \"*/*\",\n      \"Content-Length\": \"14\",\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      \"User-Agent\": \"curl/7.58.0\"\n    },\n    \"headers_keys\": [\n      \"User-Agent\",\n      \"Accept\",\n      \"Content-Length\",\n      \"Content-Type\"\n    ],\n    \"headers_values\": [\n      \"curl/7.58.0\",\n      \"*/*\",\n      \"14\",\n      \"application/x-www-form-urlencoded\"\n    ],\n    \"errors\": null,\n    \"body\": {\n      \"content\": \"Enter my world\",\n      \"base64\": \"RW50ZXIgbXkgd29ybGQ=\",\n      \"truncated\": false\n    },\n    \"is_tls\": false\n  },\n  \"ip\": null,\n  \"timestamp\": \"2020-11-17T21:16:23.847161686+01:00\",\n  \"session\": \"buq2v5oo4skos28gfp20\",\n  \"type\": \"http\",\n  \"src_ip\": \"127.0.0.1\",\n  \"dst_port\": 10080,\n  \"matches\": {},\n  \"inline_matches\": [],\n  \"embedded\": {}\n}\n</code></pre> <p>Info</p> <p>The <code>errors</code> field contains the error met while parsing the request body or the Host field.</p>"},{"location":"layers/#tcp","title":"TCP","text":""},{"location":"layers/#rules_1","title":"Rules","text":"Key Type Example <code>tcp.payload</code> complex <pre>tcp.payload:\u00a0\u00a0contains:\u00a0\u00a0\u00a0\u00a0- \"/console/css/%2e\"<pre>\n\n\n<code>tcp.flags</code>\nflags\n<pre>tcp.flags:\u00a0\u00a0- \"PA\"\u00a0\u00a0- \"S\"<pre>\n\n\n<code>tcp.fragbits</code>\nflags\n<pre>tcp.fragbits:\u00a0\u00a0- \"M\"</pre>\n\n\n<code>tcp.dsize</code>\nnumber\n<pre>tcp.dsize: 1234</pre>\n\n\n<code>tcp.seq</code>\nnumber\n<pre>tcp.seq: 4321</pre>\n\n\n<code>tcp.ack</code>\nnumber\n<pre>tcp.ack: 0</pre>\n\n\n<code>tcp.window</code>\nnumber\n<pre>tcp.window: 512</pre>\n\n\n\n<p>TCP flags values :</p>\n\n\n\nKeyword\nName\nValue\n\n\n\n\n<code>F</code>\nFIN\n<pre>0x01</pre>\n\n\n<code>S</code>\nSYN\n<pre>0x02</pre>\n\n\n<code>R</code>\nRST\n<pre>0x04</pre>\n\n\n<code>P</code>\nPSH\n<pre>0x08</pre>\n\n\n<code>A</code>\nACK\n<pre>0x10</pre>\n\n\n<code>U</code>\nURG\n<pre>0x20</pre>\n\n\n<code>E</code>\nECE\n<pre>0x40</pre>\n\n\n<code>C</code>\nCWR\n<pre>0x80</pre>\n\n\n<code>0</code>\nNULL\n<pre>0x00</pre>\n\n\n\n<p>TCP fragbits values :</p>\n\n\n\nKeyword\nName\nValue\n\n\n\n\n<code>M</code>\nMore Fragments\n<pre>0x01</pre>\n\n\n<code>D</code>\nDon't Fragment\n<pre>0x02</pre>\n\n\n<code>R</code>\nReserved Bit\n<pre>0x04</pre>"},{"location":"layers/#log-data_1","title":"Log data","text":"<p>Example</p>\n<pre><code>{\n  \"tcp\": {\n    \"window\": 512,\n    \"seq\": 1906765553,\n    \"ack\": 2514263732,\n    \"data_offset\": 8,\n    \"flags\": \"PA\",\n    \"urgent\": 0,\n    \"payload\": {\n      \"content\": \"I made a discovery today. I found a computer.\\n\",\n      \"base64\": \"SSBtYWRlIGEgZGlzY292ZXJ5IHRvZGF5LiAgSSBmb3VuZCBhIGNvbXB1dGVyLgo=\",\n      \"truncated\": false\n    }\n  },\n  \"ip\": {\n    \"version\": 4,\n    \"ihl\": 5,\n    \"tos\": 0,\n    \"length\": 99,\n    \"id\": 39114,\n    \"fragbits\": \"DF\",\n    \"frag_offset\": 0,\n    \"ttl\": 64,\n    \"protocol\": 6\n  },\n  \"timestamp\": \"2020-11-16T15:50:01.277828+01:00\",\n  \"session\": \"bup9368o4skolf20rt8g\",\n  \"type\": \"tcp\",\n  \"src_ip\": \"127.0.0.1\",\n  \"dst_port\": 1234,\n  \"matches\": {},\n  \"inline_matches\": [],\n  \"embedded\": {}\n}\n</code></pre>"},{"location":"layers/#udp","title":"UDP","text":""},{"location":"layers/#rules_2","title":"Rules","text":"Key\nType\nExample\n\n\n\n\n<code>udp.payload</code>\ncomplex\n<pre>udp.payload:\u00a0\u00a0contains:\u00a0\u00a0\u00a0\u00a0- \"/console/css/%2e\"<pre>\n\n\n<code>udp.checksum</code>\nnumber\n<pre>udp.checksum: 0xfe37</pre>\n\n\n<code>udp.length</code>\nnumber\n<pre>udp.length: 36</pre>\n\n\n<code>udp.dsize</code>\nnumber\n<pre>udp.dsize: 28</pre>\n\n\n\n\n<p>Tip</p>\n<p><code>udp.dsize</code> check the payload size, while the <code>udp.length</code> check the UDP packet's length.</p>"},{"location":"layers/#log-data_2","title":"Log data","text":"<p>Example</p>\n<pre><code>{\n  \"udp\": {\n    \"payload\": {\n      \"content\": \"I made a discovery today. I found a computer.\\n\",\n      \"base64\": \"SSBtYWRlIGEgZGlzY292ZXJ5IHRvZGF5LiBJIGZvdW5kIGEgY29tcHV0ZXIuCg==\",\n      \"truncated\": false\n    },\n    \"length\": 54,\n    \"checksum\": 65097\n  },\n  \"ip\": {\n    \"version\": 4,\n    \"ihl\": 5,\n    \"tos\": 0,\n    \"length\": 74,\n    \"id\": 3230,\n    \"fragbits\": \"DF\",\n    \"frag_offset\": 0,\n    \"ttl\": 64,\n    \"protocol\": 17\n  },\n  \"timestamp\": \"2020-11-17T19:02:12.90819+01:00\",\n  \"session\": \"buq1090o4sktrqnfoe6g\",\n  \"type\": \"udp\",\n  \"src_ip\": \"127.0.0.1\",\n  \"dst_port\": 1234,\n  \"matches\": {},\n  \"inline_matches\": [],\n  \"embedded\": {}\n}\n</code></pre>"},{"location":"layers/#icmpv4","title":"ICMPv4","text":""},{"location":"layers/#rules_3","title":"Rules","text":"Key\nType\nExample\n\n\n\n\n<code>icmpv4.payload</code>\ncomplex\n<pre>icmpv4.payload:\u00a0\u00a0contains:\u00a0\u00a0\u00a0\u00a0- \"the world of the electron and the switch\"<pre>\n\n\n<code>icmpv4.typecode</code>\nnumber\n<pre>icmpv4.typecode: 2048</pre>\n\n\n<code>icmpv4.type</code>\nnumber\n<pre>icmpv4.type: 0x8</pre>\n\n\n<code>icmpv4.code</code>\nnumber\n<pre>icmpv4.code: 0</pre>\n\n\n<code>icmpv4.seq</code>\nnumber\n<pre>icmpv4.seq: 1</pre>\n\n\n<code>icmpv4.checksum</code>\nnumber\n<pre>icmpv4.checksum: 0x0416</pre>"},{"location":"layers/#log-data_3","title":"Log data","text":"<p>Example</p>\n<pre><code>{\n  \"icmpv4\": {\n    \"type_code\": 2048,\n    \"type\": 8,\n    \"code\": 0,\n    \"type_code_name\": \"EchoRequest\",\n    \"checksum\": 10240,\n    \"id\": 0,\n    \"seq\": 0,\n    \"payload\": {\n      \"content\": \"the world of the electron and the switch\",\n      \"base64\": \"dGhlIHdvcmxkIG9mIHRoZSBlbGVjdHJvbiBhbmQgdGhlIHN3aXRjaA==\",\n      \"truncated\": false\n    }\n  },\n  \"ip\": {\n    \"version\": 4,\n    \"ihl\": 5,\n    \"tos\": 0,\n    \"length\": 68,\n    \"id\": 1,\n    \"fragbits\": \"\",\n    \"frag_offset\": 0,\n    \"ttl\": 64,\n    \"protocol\": 1\n  },\n  \"timestamp\": \"2020-11-18T12:47:25.101191+01:00\",\n  \"session\": \"n/a\",\n  \"type\": \"icmpv4\",\n  \"src_ip\": \"127.0.0.1\",\n  \"dst_port\": 0,\n  \"matches\": {},\n  \"inline_matches\": [],\n  \"embedded\": {}\n}\n</code></pre>"},{"location":"layers/#icmpv6","title":"ICMPv6","text":""},{"location":"layers/#rules_4","title":"Rules","text":"Key\nType\nExample\n\n\n\n\n<code>icmpv6.payload</code>\ncomplex\n<pre>icmpv6.payload:\u00a0\u00a0contains:\u00a0\u00a0\u00a0\u00a0- \"the world of the electron and the switch\"<pre>\n\n\n<code>icmpv6.typecode</code>\nnumber\n<pre>icmpv6.typecode: 32768</pre>\n\n\n<code>icmpv6.type</code>\nnumber\n<pre>icmpv6.type: 0x80</pre>\n\n\n<code>icmpv6.code</code>\nnumber\n<pre>icmpv6.code: 0</pre>\n\n\n<code>icmpv6.checksum</code>\nnumber\n<pre>icmpv6.checksum: 0x275b</pre>"},{"location":"layers/#log-data_4","title":"Log data","text":"<p>Example</p>\n<pre><code>{\n  \"icmpv6\": {\n    \"type_code\": 32768,\n    \"type\": 128,\n    \"code\": 0,\n    \"type_code_name\": \"EchoRequest\",\n    \"checksum\": 44947,\n    \"payload\": {\n      \"content\": \"\\u0000\\u0000\\u0000\\u0000the world of the electron and the switch\",\n      \"base64\": \"AAAAAHRoZSB3b3JsZCBvZiB0aGUgZWxlY3Ryb24gYW5kIHRoZSBzd2l0Y2g=\",\n      \"truncated\": false\n    }\n  },\n  \"ip\": {\n    \"version\": 6,\n    \"length\": 48,\n    \"next_header\": 58,\n    \"next_header_name\": \"ICMPv6\",\n    \"traffic_class\": 0,\n    \"flow_label\": 0,\n    \"hop_limit\": 64\n  },\n  \"timestamp\": \"2020-11-18T12:42:47.461931+01:00\",\n  \"session\": \"n/a\",\n  \"type\": \"icmpv6\",\n  \"src_ip\": \"::1\",\n  \"dst_port\": 0,\n  \"matches\": {},\n  \"inline_matches\": [],\n  \"embedded\": {}\n}\n</code></pre>"},{"location":"links/","title":"Links","text":"<ul> <li>The project is maintained in the Github repository</li> <li>Follow @bonjourmalware on Twitter for updates</li> </ul>"},{"location":"meloctl/","title":"Meloctl","text":""},{"location":"meloctl/#description","title":"Description","text":"<p>Meloctl is a helper program that streamlines the use of Melody and its ecosystem by providing features such as validation checks for Melody's configuration and rule files.</p> <pre><code>Melody helper\n\nUsage:\n  meloctl [command]\n\nAvailable Commands:\n  config      Interact with a Melody config file\n  get         Get a Meloctl config value by name\n  help        Help about any command\n  init        Create Meloctl config\n  rule        Handle Melody rule files\n  set         Set a Meloctl config value by name\n\nFlags:\n  -h, --help   help for meloctl\n\nUse \"meloctl [command] --help\" for more information about a command.\n</code></pre>"},{"location":"meloctl/#initilization","title":"Initilization","text":"<p>For better user experience, you'll need to store basic information such as Melody's home dir in a configuration file before starting. </p> <p>To do so, run <code>meloctl init</code> to start the interactive prompt.</p>"},{"location":"meloctl/#features","title":"Features","text":""},{"location":"meloctl/#config","title":"config","text":""},{"location":"meloctl/#check","title":"check","text":"<p>Check a rule file or a directory containing multiple files  </p> <p>Example : </p> <pre><code>$ ./meloctl config check ./config.yml \n\u2705 [./config.yml]: OK\n</code></pre>"},{"location":"meloctl/#rule","title":"rule","text":""},{"location":"meloctl/#check_1","title":"check","text":"<p>Validate the YAML syntax and look for unknown properties or fields.</p> <pre><code>$ ./meloctl rule check ./rules/rules-available \n\u274c [rules/rules-available/cms.yml]: unknown property 'http.uri|nonexistent'\n\u2705 [rules/rules-available/microsoft.yml]: OK\n\u274c [rules/rules-available/nas.yml]: yaml: line 2: did not find expected key\n\u2705 [rules/rules-available/rdp.yml]: OK\n\u2705 [rules/rules-available/router.yml]: OK\n\u2705 [rules/rules-available/server.yml]: OK\n\u2705 [rules/rules-available/vpn.yml]: OK\n\u2705 [rules/rules-available/web.yml]: OK\n</code></pre>"},{"location":"meloctl/#init","title":"init","text":"<p>Bootstrap a rule with an automatically pre-filled template.</p> <p>Usage :</p> <pre><code>Usage:\n  meloctl rule init [flags]\n\nFlags:\n  -a, --author string            Author field for new rule (default \"Changeme\")\n  -d, --description string       Description field for new rule\n  -f, --force                    Do not ask permission to overwrite if a rule already defined\n  -h, --help                     help for init\n  -i, --interactive              Ask for each parameter for the new rule\n  -l, --layer string             Layer field for new rule (default \"http\")\n  -n, --name string              Name field for new rule (default \"Changeme\")\n  -r, --references stringArray   References fields new rule\n  -s, --status string            Status field for new rule (default \"experimental\")\n  -t, --tags stringToString      Tags fields for new rule (default [])\n</code></pre> <p>Default template :</p> <pre><code>$ ./meloctl rule init demo.yml\nWriting :\n Changeme:\n    layer: http\n    meta:\n        version: \"1.0\"\n        id: 6ddbbfaa-72c1-41d8-bb78-34111286a8d2\n        author: Changeme\n        status: experimental\n        created: 2021/04/19\n        modified: 2021/04/19\n        description: \"\"\n    match:\n        http.uri:\n            contains|nocase:\n                - \"\"\n            endswith:\n                - \"\"\n            is|regex:\n                - \"\"\n            startswith|any:\n                - \"\"\n    references: []\n    tags: {}\n\n\u2705 [/opt/melody/demo.yml]: Rule file created\n</code></pre> <p>You can use the interactive mode (<code>-i</code>), give specific values, or even mix both :</p> <pre><code>$ ./meloctl rule init demo.yml -i --name \"Demo rule\" --status testing --tag \"purpose=demo\" --tag \"teapot.state=empty\"\nUse the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190 \n? Layer: \n  \u25b8 http\n    icmp\n    tcp\n    udp\n    ip\n\u2714 http\n\u2714 Version: 1.0\nAuthor: Changeme\nUse the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190 \n? Status: \n    stable\n    experimental\n  \u25b8 testing\n\u2714 testing\nCreated: 2021/04/19\nModified: 2021/04/19\n\u2714 Description: This is a demo rule\n\nWriting :\n Demo rule:\n    layer: http\n    meta:\n        version: \"1.0\"\n        id: 8738f81c-35d4-45f0-b553-c9d9c8993e4c\n        author: Changeme\n        status: testing\n        created: 2021/04/19\n        modified: 2021/04/19\n        description: \"\"\n    match:\n        http.uri:\n            contains|nocase:\n                - \"\"\n            endswith:\n                - \"\"\n            is|regex:\n                - \"\"\n            startswith|any:\n                - \"\"\n    references: []\n    tags:\n        purpose: demo\n        teapot.state: empty\n\n\u2705 [/opt/melody/demo.yml]: Rule file created\n</code></pre>"},{"location":"meloctl/#add","title":"add","text":"<p>This command will do the same as <code>init</code>, except the new rule will be appended to the specified file.</p>"},{"location":"meloctl/#init_1","title":"init","text":"<pre><code>$ ./meloctl init\nMelody home directory: /opt/melody\n\u2705 [~/.config/meloctl/meloctl.yml] Meloctl has been initialized\n</code></pre>"},{"location":"meloctl/#get","title":"get","text":"<pre><code>$ ./meloctl get melody.home\nmelody.home =&gt; /opt/melody \n</code></pre>"},{"location":"meloctl/#set","title":"set","text":"<pre><code>$ ./meloctl set melody.home /opt/melody\nmelody.home =&gt; /opt/melody \n\u2705 [~/.config/meloctl/meloctl.yml] Configuration file updated\n</code></pre>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#tldr","title":"TL;DR","text":""},{"location":"quickstart/#release","title":"Release","text":"<p>Get the latest release at <code>https://github.com/bonjourmalware/melody/releases</code>.</p> <pre><code>make install            # Set default outfacing interface\nmake cap                # Set network capabilities to start Melody without elevated privileges\nmake certs              # Make self signed certs for the HTTPS fileserver\nmake default_rules      # Enable the default rules\nmake service            # Create a systemd service to restart the program automatically and launch it at startup \n                        # Note that the script expects that you've installed Melody in /opt/melody\n\nsudo systemctl stop melody  # Stop the service while we're configuring it\n</code></pre> <p>Update the <code>filter.bpf</code> file to filter out unwanted packets.</p> <pre><code>sudo systemctl start melody     # Start Melody\nsudo systemctl status melody    # Check that Melody is running    \n</code></pre> <p>The logs should start to pile up in <code>/opt/melody/logs/melody.ndjson</code>.</p> <pre><code>tail -f /opt/melody/logs/melody.ndjson # | jq\n</code></pre>"},{"location":"quickstart/#from-source","title":"From source","text":"<pre><code>git clone https://github.com/bonjourmalware/melody /opt/melody\ncd /opt/melody\nmake build\n</code></pre> <p>Then continue with the steps from the release TL;DR.</p>"},{"location":"quickstart/#docker","title":"Docker","text":"<pre><code>make certs                        # Make self signed certs for the HTTPS fileserver\nmake default_rules                # Enable the default rules\nmkdir -p /opt/melody/logs\ncd /opt/melody/\n\ndocker pull bonjourmalware/melody:latest\n\nMELODY_CLI=\"\" # Put your CLI options here. Example : export MELODY_CLI=\"-s -i 'lo' -F 'dst port 5555' -o 'server.http.port: 5555'\"\n\ndocker run \\\n    --net=host \\\n    -e \"MELODY_CLI=$MELODY_CLI\" \\\n    --mount type=bind,source=\"$(pwd)/filter.bpf\",target=/app/filter.bpf,readonly \\\n    --mount type=bind,source=\"$(pwd)/config.yml\",target=/app/config.yml,readonly \\\n    --mount type=bind,source=\"$(pwd)/var\",target=/app/var,readonly \\\n    --mount type=bind,source=\"$(pwd)/rules\",target=/app/rules,readonly \\\n    --mount type=bind,source=\"$(pwd)/logs\",target=/app/logs/ \\\n    bonjourmalware/melody\n</code></pre> <p>The logs should start to pile up in <code>/opt/melody/logs/melody.ndjson</code>.</p>"},{"location":"quickstart/#before-we-start","title":"Before we start","text":"<p>Hi !</p> <p>You'll need the following info :</p> <ul> <li>The name of the interface on which you want Melody to listen to <ul> <li>wlp3s0, ens3, enp0s25, eth0...</li> </ul> </li> <li>All the IP addresses to exclude from monitoring</li> </ul> <p>Tip</p> <p>You will most likely want to ban at least the address from which you access the server and the addresses used for monitoring (don't forget your hosting provider's).</p> <p>Clone the repo to get the default rules and configuration files :</p> <pre><code>git clone https://github.com/bonjourmalware/melody\n</code></pre> <p>Tip</p> <p>You can also write the configuration files later or use CLI options to use it as a standalone binary</p>"},{"location":"quickstart/#firewall","title":"Firewall","text":"<p>Don't forget to check your firewall to ensure you're not blocking packets from reaching the sensor.</p> <p>Tip</p> <p>You might want to disengage your hosting provider DDoS protection.</p>"},{"location":"quickstart/#build-from-source","title":"Build from source","text":"<p>Warning</p> <p>You need the libpcap headers before building Melody. Install them with : <pre><code>sudo apt update\nsudo apt install libpcap-dev\n</code></pre></p> <p>Build Melody with :</p> <pre><code>make build\n</code></pre> <p>or</p> <pre><code>go build -ldflags=\"-s -w -extldflags=-static\" -o melody\nsudo setcap cap_net_raw,cap_setpcap=ep ./melody\n</code></pre>"},{"location":"quickstart/#grab-a-release","title":"Grab a release","text":"<p>You can grab the latest release by visiting https://github.com/bonjourmalware/melody/releases/latest.</p>"},{"location":"quickstart/#docker_1","title":"Docker","text":"<p>You can also use Docker and pull the image from Docker Hub :</p> <pre><code>docker pull bonjourmalware/melody:latest\n</code></pre> <p>Don't forget to create the <code>logs</code> directory, or the mount will fail :</p> <pre><code>mkdir -p /opt/melody/logs\n</code></pre> <p>Run it with :</p> <pre><code>make docker_run\n</code></pre> <p>or</p> <pre><code>export MELODY_CLI=\"\" # Put your CLI options here. Example : export MELODY_CLI=\"-s -i 'lo' -F 'dst port 5555' -o 'server.http.port: 5555'\"\n\ndocker run \\\n    --net=host \\\n    -e \"MELODY_CLI=$MELODY_CLI\" \\\n    --mount type=bind,source=\"$(pwd)/filter.bpf\",target=/app/filter.bpf,readonly \\\n    --mount type=bind,source=\"$(pwd)/config.yml\",target=/app/config.yml,readonly \\\n    --mount type=bind,source=\"$(pwd)/var\",target=/app/var,readonly \\\n    --mount type=bind,source=\"$(pwd)/rules\",target=/app/rules,readonly \\\n    --mount type=bind,source=\"$(pwd)/logs\",target=/app/logs/ \\\n    melody\n</code></pre>"},{"location":"quickstart/#configuration","title":"Configuration","text":""},{"location":"quickstart/#melody-configuration","title":"Melody configuration","text":"<p>All the available configuration options are listed with their default values in the <code>config.yml</code> file.</p> <p>You'll want to look at a few things before getting started :</p> <ul> <li>Set the <code>listen.interface</code> to the one on which you want Melody to be listening on</li> </ul> <p>Tip</p> <p>On most recent linux distribution, you can run <code>route | grep '^default' | grep -o '[^ ]*$'</code> to find the default WAN card. Note that you'll need the <code>net-tools</code> package (<code>sudo apt install net-tools</code>) in order to use the <code>route</code> command. </p> <p>Tip</p> <p>On Windows, you'll want an interface name like <code>\\Device\\NPF_{4E273621-5161-46C8-895A-48D0E52A0B83}</code>.</p> <p>If you find an interface name with <code>TCP</code> in place of <code>NPF</code>, try swaping both.</p> <p>See Find Windows interfaces for more details.</p> <p>Don't forget to wrap your string with <code>'</code> to prevent the parsing of the escaping <code>\\</code> :  <pre><code>interface: '\\Device\\NPF_{4E273621-5161-46C8-895A-48D0E52A0B83}'\n</code></pre></p> <p>Note</p> <p>Note that Melody listen on <code>lo</code> by default. You can override the listening interface with the <code>-i</code> switch.</p> <ul> <li> <p>The dummy HTTP/S servers are enabled by default. Disable it if you're not interested by this kind of data, or you're putting Melody next to a web application</p> </li> <li> <p>Default rules are disabled by default. You can enable them by creating a symlink for each rule in the active rule directory specified in the configuration file (<code>$melody/rules/rules-enabled</code> by default)</p> </li> </ul> <p>Tip</p> <p>To create a symlink, use the following command from the root of the projet : <pre><code>ln -rs ./rules/rules-available/$rule.yml ./rules/rules-enabled/\n</code></pre></p> <p>Use a wildcard to enable all the rulesets : <pre><code>ln -rs ./rules/rules-available/*.yml ./rules/rules-enabled/\n</code></pre></p>"},{"location":"quickstart/#https-server","title":"HTTP/S server","text":"<p>In order to capture the full HTTP transactions, the client must have a server to connect to. To ease that process, a dummy HTTP/S server is available.</p> <p>The default configuration is to answer <code>200 OK</code> on every routes, along with a <code>Server: Apache</code> header.</p>"},{"location":"quickstart/#iptables","title":"iptables","text":"<p>To capture the HTTP traffic your server receives on every ports, I recommend using <code>iptables</code> to redirect the data from every ports to the one Melody is listening on.</p> <p>Danger</p> <p>Be very careful while applying these modifications. You must at least exclude your remote connection port using the <code>! --dports</code> switch, or you will be locked out. </p> <p>To achieve this, add a rule to your <code>PREROUTING</code> table :</p> <pre><code>sudo iptables -A PREROUTING -t nat -i $INTERFACE -p tcp -m multiport ! --dports $REMOTE_ACCESS_PORT,$ANOTHER_EXCLUDED_PORT -j REDIRECT --to-port $MELODY_HTTP_PORT\n</code></pre> <p>Example : </p> <pre><code>sudo iptables -A PREROUTING -t nat -i ens3 -p tcp -m multiport ! --dports 1234,5678 -j REDIRECT --to-port 10800\n</code></pre> <p>Here the ports <code>1234</code> and <code>5678</code> have been excluded from the redirection.</p> <p>Note</p> <p>Using the <code>sudo iptables -t nat -L PREROUTING -n -v</code> command, you should see something like this : <pre><code>Chain PREROUTING (policy ACCEPT 1226K packets, 57M bytes)\n pkts bytes target     prot opt in     out     source               destination         \n  25M 1243M REDIRECT   tcp  --  ens3   *       0.0.0.0/0            0.0.0.0/0            multiport dports  !1234,5678 redir ports 10800\n</code></pre></p> <p>Important</p> <p>This is only used to virtually connect the HTTP server to all the ports.</p> <p>As Melody sits on the data link layer, the program will receive the packets before being handled by network layer programs such as <code>iptables</code> or <code>ufw</code>. </p> <p>Note</p> <p>I won't cover it here as I'm now knowledgeable enough on this, but you'll want to look at advfirewall and the <code>portproxy</code> command to replicate this on Windows.</p>"},{"location":"quickstart/#berkley-packet-filter-bpf","title":"Berkley Packet Filter (BPF)","text":"<p>The next step is the customization of the <code>filter.bpf</code> file. This is where you filter the data that reaches Melody.</p> <p>By default, only inbound traffic is allowed and all 127.0.0.0/24 subnet are banned. </p> <p>Note</p> <p>You can use the <code>-F|--filter</code> switch to set a filter via CLI.    </p> <p>Tip</p> <p>If you're using a VPS, you might need to filter out the IP addresses your hosting provider uses to check the status of your server. </p>"},{"location":"quickstart/#source-ip-filtering","title":"Source IP filtering","text":"<p>Use <code>[src|dst] net &lt;network&gt;</code> to filter packets according to their IP.</p> <p>Example :</p> <pre><code>inbound and not net 127.0.0.1\n</code></pre> <p>You can specify a range to exclude using the CIDR notation :</p> <pre><code>inbound and not net 127.0.0.0/24\n</code></pre>"},{"location":"quickstart/#port-filtering","title":"Port filtering","text":"<p>Use <code>[src|dst] port &lt;port&gt;</code> to filter packets according to their port.</p> <p>Example :</p> <pre><code>not port 1234\n</code></pre> <p>You can specify a range to exclude using the CIDR notation and the <code>portrange</code> keyword :</p> <pre><code>not portrange 1234-5678\n</code></pre> <p>Your <code>filter.bpf</code> should look like this :</p> <pre><code>inbound\nand not port 1234\nand not net 127.0.0.0/24\nand not net 192.0.2.1\n</code></pre> <p>Important</p> <p>Your file should always start with the <code>inbound</code> keyword. I recommend adding your filter rules below, starting with an <code>and</code> keyword.</p>"},{"location":"quickstart/#advanced","title":"Advanced","text":"<p>Here is all you need to know about the BPF syntax and here is a great source of examples to get quickly started.</p>"},{"location":"quickstart/#rules","title":"Rules","text":"<p>Melody rules are used to apply tags on matching packets. They have multiple use cases, such as monitoring emerging threats, automated droppers, vulnerability scanners, etc.</p> <p>You can look into the <code>$melody/rules/rule-available</code> and <code>$melody/internal/rules/test_resources</code> folders to quickly find working examples. </p>"},{"location":"quickstart/#basics","title":"Basics","text":"<p>A rule file can contain multiple rules description and constitute a ruleset. </p> <p>Here is a rule example that detects CVE-2020-14882 (Oracle Weblogic RCE) scans or exploitation attempts by matching either of the two URI and the HTTP verb :</p> <pre><code>CVE-2020-14882 Oracle Weblogic Server RCE:\n  layer: http\n  meta:\n    id: 3e1d86d8-fba6-4e15-8c74-941c3375fd3e\n    version: 1.0\n    author: BonjourMalware\n    status: stable\n    created: 2020/11/07\n    modified: 2020/20/07\n    description: \"Checking or trying to exploit CVE-2020-14882\"\n    references:\n      - \"https://nvd.nist.gov/vuln/detail/CVE-2020-14882\"\n  match:\n    http.uri:\n      startswith|any|nocase:\n        - \"/console/css/\"\n        - \"/console/images\"\n      contains|any|nocase:\n        - \"console.portal\"\n        - \"consolejndi.portal?test_handle=\"\n  tags:\n    cve: \"cve-2020-14882\"\n    vendor: \"oracle\"\n    product: \"weblogic\"\n    impact: \"rce\"\n</code></pre> <p>This rule is part of the default <code>server.yml</code> ruleset and tag CVE-2020-14882-related packets.</p> <p>If a packet match, its tags will be appended to the <code>matches</code> field in the packet's log.</p> <p>See the Rules section for details on the rules syntax.</p> <p>Important</p> <p>You must generate a new UUIDv4 for each rule you create.</p>"},{"location":"quickstart/#output","title":"Output","text":""},{"location":"quickstart/#stdout","title":"Stdout","text":"<p>You can redirect the output to stdout by using the <code>-s</code> switch.</p> <p>Example</p> <pre><code>{\n  \"tcp\": {\n    \"window\": 512,\n    \"seq\": 1906765553,\n    \"ack\": 2514263732,\n    \"data_offset\": 8,\n    \"flags\": \"PA\",\n    \"urgent\": 0,\n    \"payload\": {\n      \"content\": \"I made a discovery today. I found a computer.\\n\",\n      \"base64\": \"SSBtYWRlIGEgZGlzY292ZXJ5IHRvZGF5LiAgSSBmb3VuZCBhIGNvbXB1dGVyLgo=\",\n      \"truncated\": false\n    }\n  },\n  \"ip\": {\n    \"version\": 4,\n    \"ihl\": 5,\n    \"tos\": 0,\n    \"length\": 99,\n    \"id\": 39114,\n    \"fragbits\": \"DF\",\n    \"frag_offset\": 0,\n    \"ttl\": 64,\n    \"protocol\": 6\n  },\n  \"timestamp\": \"2020-11-16T15:50:01.277828+01:00\",\n  \"session\": \"bup9368o4skolf20rt8g\",\n  \"type\": \"tcp\",\n  \"src_ip\": \"127.0.0.1\",\n  \"dst_port\": 1234,\n  \"matches\": {},\n  \"inline_matches\": [],\n  \"embedded\": {}\n}\n</code></pre>"},{"location":"quickstart/#dump","title":"Dump","text":"<p>A dump mode is also available with the <code>-d|--dump</code> switch. Similar to <code>tcpdump</code>, it will print raw packets to stdout instead of Melody json lines.</p> <p>Example</p> <pre><code>PACKET: 76 bytes, wire length 76 cap length 76 @ 2020-11-16 15:46:00.927899 +0100 CET\n- Layer 1 (14 bytes) = Ethernet {Contents=[..14..] Payload=[..62..] SrcMAC=00:00:00:00:00:00 DstMAC=00:00:00:00:00:00 EthernetType=IPv4 Length=0}\n- Layer 2 (20 bytes) = IPv4     {Contents=[..20..] Payload=[..42..] Version=4 IHL=5 TOS=0 Length=62 Id=39110 Flags=DF FragOffset=0 TTL=64 Protocol=TCP Checksum=41969 SrcIP=127.0.0.1 DstIP=127.0.0.1 Options=[] Padding=[]}\n- Layer 3 (32 bytes) = TCP      {Contents=[..32..] Payload=[..10..] SrcPort=58766 DstPort=1234(search-agent) Seq=1906765476 Ack=2514263732 DataOffset=8 FIN=false SYN=false RST=false PSH=true ACK=true URG=false ECE=false CWR=false NS=false Window=512 Checksum=65074 Urgent=0 Options=[TCPOption(NOP:), TCPOption(NOP:), TCPOption(Timestamps:1712590417/1712586943 0x66140e51661400bf)] Padding=[]}\n- Layer 4 (10 bytes) = Payload  10 byte(s)\n</code></pre> <p>Note</p> <p>All the console messages are printed to stderr in order to allow piping Melody's data into <code>jq</code>.</p>"},{"location":"requirements/","title":"Requirements","text":""},{"location":"requirements/#go-version","title":"Go version","text":"<p>Minimum supported Go version is 1.11, but we recommend using Go 1.13+ since that's the lowest version we're using for testing.</p>"},{"location":"requirements/#libpcap","title":"libpcap","text":"<p>You'll need the <code>libpcap</code> C headers to build the program.</p> <p>Install it with :</p> <pre><code>sudo apt update\nsudo apt install libpcap-dev\n</code></pre> <p>Note</p> <p>You won't need them if you're using Docker or a pre-compiled release binary.</p>"},{"location":"requirements/#https-dummy-server","title":"HTTPS dummy server","text":"<p>You'll need TLS certificates in order to use the built-in dummy HTTPS server.</p> <p>Use one of these commands to generate them for you :</p> <pre><code>make certs\n</code></pre> <p>or</p> <pre><code>mkdir -p var/https/certs\nopenssl req -x509 -subj \"/C=AU/ST=Some-State/O=Internet Widgits Pty Ltd/CN=localhost\" -newkey rsa:4096 -keyout var/https/certs/key.pem -out var/https/certs/cert.pem -days 3650 -nodes\n</code></pre> <p>Warning</p> <p>Using these commands will overwrite any <code>cert.pem</code> or <code>key.pem</code> file already present in <code>$melody/var/https/certs/</code> </p> <p>Tip</p> <p>You can also use your own by putting the <code>key.pem</code> and <code>cert.pem</code> in <code>$melody/var/https/certs</code>. Keep in mind that it might be used by attackers to fingerprint or gain information on your infrastructure.</p>"},{"location":"rules/","title":"Rules","text":"<p>Melody rules are used to apply tags on matching packets. They have multiple use cases, such as monitoring emerging threats, automated droppers, vulnerability scanners...</p> <p>Take a look in the <code>$melody/rule-available</code> and <code>$melody/internal/rules/test_resources</code> folders to quickly find working examples. </p>"},{"location":"rules/#first-look","title":"First look","text":"<p>A rule file can contain multiple rule descriptions. </p> <p>Example</p> <p>This example detects CVE-2020-14882 (Oracle Weblogic RCE) scans or exploitation attempts by matching either of the two URI on the HTTP level :</p> <pre><code>CVE-2020-14882 Oracle Weblogic Server RCE:\n  layer: http\n  meta:\n    id: 3e1d86d8-fba6-4e15-8c74-941c3375fd3e\n    version: 1.0\n    author: BonjourMalware\n    status: stable\n    created: 2020/11/07\n    modified: 2020/20/07\n    description: \"Checking or trying to exploit CVE-2020-14882\"\n    references:\n      - \"https://nvd.nist.gov/vuln/detail/CVE-2020-14882\"\n  match:\n    http.uri:\n      startswith|any|nocase:\n        - \"/console/css/\"\n        - \"/console/images\"\n      contains|any|nocase:\n        - \"console.portal\"\n        - \"consolejndi.portal?test_handle=\"\n  tags:\n    cve: \"cve-2020-14882\"\n    vendor: \"oracle\"\n    product: \"weblogic\"\n    impact: \"rce\"\n</code></pre> <p>Tip</p> <p>Check the the <code>whitelist</code> and <code>blacklist</code> section to filter ports and IP addresses.</p>"},{"location":"rules/#structure","title":"Structure","text":"<p>The rules have 7 sections : <code>layer</code>, <code>meta</code>, <code>match</code>, <code>whitelist</code>, <code>blacklist</code>, <code>tags</code> and <code>embed</code>.</p>"},{"location":"rules/#layer","title":"layer","text":"<p>The rule will look for matches in the specified <code>layer</code>'s protocol data.</p> <p>Each <code>layer</code> expose different fields depending on the protocol they represent. They're detailed in the Layers page.</p> <p>The following layers are supported :</p> Key IPv4 IPv6 http \u2705 \u2705 tcp \u2705 \u2705 udp \u2705 \u2705 icmpv4 \u2705 \u274c icmpv6 \u274c \u2705 <p>Important</p> <p>A single rule only applies to the targeted layer. Use multiple rules if you want to match multiple layers.</p>"},{"location":"rules/#meta","title":"meta","text":"<p>The <code>meta</code> section contains all the rule's metadata. Every keys are mandatory, except <code>references</code>. </p> Key Type Description Values Examples id string Rule's unique identifier. Each rule must have a unique UUIDv4 - <pre>id: c30370f7-aaa8-41d0-a392-b56c94869128</pre> version string Rule syntax version 1.0 <pre>version: 1.0</pre> author string The name of the rule's author - <pre>author: BonjourMalware</pre> status string The status gives an indication of the usability of the rule stable, experimental <pre>status: stable</pre> created yyyy/mm/dd Creation date - <pre>created: 2020/11/07</pre> modified yyyy/mm/dd Last modification date - <pre>modified: 2020/11/07</pre> description string A quick description of what the rule is attempting to match - <pre>description: Checking or trying to exploit CVE-2020-14882</pre> references array The status gives an indication of the usability of the rule - <pre>references: \u00a0\u00a0\u00a0\u00a0- \"https://nvd.nist.gov/vuln/detail/CVE-2020-14882\"\u00a0\u00a0\u00a0\u00a0- \"https://github.com/jas502n/CVE-2020-14882\"\u00a0\u00a0\u00a0\u00a0- ...</pre> <p>Important</p> <p>You must generate a new UUIDv4 for the <code>id</code> of every rule you create.</p> <p>Sample code for Python : <pre><code>import uuid\n\nprint(uuid.uuid4())\n</code></pre></p> <p>Go (playground) : <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/google/uuid\"\n)\n\nfunc main(){\n    fmt.Println(uuid.New())\n}\n</code></pre></p>"},{"location":"rules/#match","title":"match","text":"<p>The <code>match</code> block contains a set of conditions that will be checked on every packet of the rule's <code>layer</code> type.</p> <p>Here is the structure of the <code>match</code> section :</p> <pre><code>match:\n  any: [true|false]                 # false by default\n  field1:                           # complex condition\n    any: [true|false]               # false by default\n    operator1|modifier1|modifier2:  # matching operator with its modifiers\n      - value1\n      - value2\n    operator2:\n      - value\n  field2:                           # array condition\n    - value1\n    - value2\n  field3: value                     # string or number condition\n</code></pre>"},{"location":"rules/#conditions","title":"Conditions","text":"<p>A condition corresponds to a field in a packet, specified by its name.</p> <p>The available conditions depends on the <code>layer</code> key. The keys are namespaced according to the type they belong to.</p> <p>Example</p> <p><code>udp.payload</code>, <code>tcp.flags</code>, <code>http.uri</code>...</p> <p>There are 3 types of conditions : <code>number</code>, <code>flags</code> or <code>complex</code>. </p>"},{"location":"rules/#number","title":"Number","text":"<p>A number.</p> <p>Example</p> <pre><code>tcp.window: 512\n</code></pre> <p>Note</p> <p>The <code>number</code> types takes advantage of YAML to support octal (0o1234), hex (0x1234) and decimal (1234) representation. </p>"},{"location":"rules/#flags","title":"Flags","text":"<p><code>flags</code> condition are made of a list of flag combination to match.</p> <p>The condition is valid as soon as a match is found (OR).</p> <p>Example</p> <pre><code>tcp.flags:\n  - \"PA\"\n  - \"S\"\n</code></pre> <p>This rule will match a TCP packet with its flag bits set to \"PA\" (PSH-ACK, 0x18) or \"S\" (SYN, 0x2).</p> <p>Note</p> <p>Only two fields support <code>flags</code> condition : <code>tcp.flags</code> and <code>tcp.fragbits</code>.</p>"},{"location":"rules/#complex","title":"Complex","text":"<p>The <code>complex</code> condition type supports matching operators and inline modifiers.</p> <p>To check which fields support <code>complex</code> conditions, take a look at the layers documentation.</p>"},{"location":"rules/#matching-operators","title":"Matching operators","text":"<p>The matching operator specifies how to handle data.</p> <p>A single condition can be made of a set of matching operators.</p> <p>Important</p> <p>By default, a rule needs to validate all the conditions to match. However, you can specify <code>any: true</code> to force a rule to test all of its conditions and return a match as soon as it find a valid one.</p> <p>Example</p> <pre><code>udp.payload:\n  contains:\n    - \"after all, we're all alike.\"\n  startswith:\n    - \"Damn kids\"\n  any: true\n</code></pre> <p>In this example, the condition key is <code>udp.payload</code> and the matching operators are <code>contains</code> and <code>startswith</code>. </p> <p>This rule will match if the payload of an UDP packet startswith the string \"Damn kids\" OR contains \"after all, we're all alike.\". </p> <p>The rule needs both to match if we remove the <code>any: true</code> option.</p> Name Description is The packet's field value is strictly equal to the condition's value contains The packet's field value contains the condition's value startswith The packet's field value starts with the condition's value endswith The packet's field value ends with the condition's value"},{"location":"rules/#modifiers","title":"Modifiers","text":"<p>Modifiers are a way to quickly set options for the matching operator.</p> <p>They live on the same line, split by <code>|</code>. All modifiers can be mixed at once.</p> <p>Important</p> <p>By default, a condition needs to match all of the given values (AND). However, you can use the <code>|any</code> modifier to reverse it and force it to test all the values and to return on the first match.</p> <p>Example</p> <pre><code>http.body:\n  contains|any|nocase:\n    - \"Enter my world\"\n    - \"the beauty of the baud\"\n</code></pre> <p>In this example, the modifiers are <code>any</code> and <code>nocase</code>. This rule will match if the URI field of an HTTP packet contains any item in the list.</p> Name Description Example any The rule match if any of the values in the list matches - nocase The match is case insensitive abcd == aBcD == ABCD regex The value is a regular expression '(?:[0-9]{1,3}.){3}[0-9]{1,3}' == 192.0.2.1 <p>Danger</p> <p>Although the regex is compiled only once, it can cause severe overhead while matching packets. Use it with caution.</p>"},{"location":"rules/#hybrid-pattern","title":"Hybrid pattern","text":"<p><code>complex</code> condition's support hex values by wrapping them between two <code>|</code>.</p> <p>You can mix hex and ascii in a single string as well.</p> <p>Example</p> <pre><code>http.body:\n  contains:\n    - \"|45 6e 74 65 72206d79| world\"\n</code></pre> <p>Note</p> <p>'0x' hex notation (<code>|0xbe 0xef|</code>) is invalid. You can mix spaced and not spaced hex bytes though.</p>"},{"location":"rules/#tags","title":"tags","text":"<p>Each of the key/value pair in the <code>tags</code> object will be appended to the <code>matches</code> field of each of the matching packets.</p>"},{"location":"rules/#embed","title":"embed","text":"<p>This is a block where the user can will embed any data in the <code>embedded</code> key of the matching packet. It can be used as an alternative to <code>tags</code> to add contextual information.</p> <p>Example</p> <pre><code>embed:\n  my_crime: \"curiosity\"\n  ...\n</code></pre>"},{"location":"rules/#whitelist-and-blacklist","title":"whitelist and blacklist","text":"<p>These two fields can be used to filter the packets on which the rule is applied.</p> <p>IP source addresses and ports are supported.</p>"},{"location":"rules/#ip-address","title":"IP address","text":"<p>Example</p> <pre><code>whitelist:\n  ips:\n    - 127.0.0.1\n</code></pre> <p>This example only tries to match the packets coming from 127.0.0.1.</p> <pre><code>blacklist:\n  ips:\n    - 127.0.0.1\n</code></pre> <p>Use the blacklist keyword to reverse the logic and apply the rule to all packets but the one coming from 127.0.0.1.</p> <p>Example</p> <pre><code>whitelist:\n  ips:\n    - 127.0.0.0/24\n</code></pre> <p>CIDR notation supported.</p>"},{"location":"rules/#ports","title":"Ports","text":"<p>Example</p> <pre><code>whitelist:\n  ports:\n    - 80\n</code></pre> <p>This example only tries to match the packets going to port 80 .</p> <pre><code>blacklist:\n  ports:\n    - 80\n</code></pre> <p>Use the blacklist keyword to reverse the logic and apply the rule to all packets but the one going to port 80.</p> <p>Example</p> <pre><code>whitelist:\n  ports:\n    - 8000 - 9000\n</code></pre> <p>Port ranges are supported. You can choose to put spaces or not.</p>"}]}